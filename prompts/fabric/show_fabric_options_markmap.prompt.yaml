name: Show_Fabric_Options_Markmap
author: Daniel Miessler
tags:
- fabric
role: Show Fabric Options Markmap
objective: FABRIC PROJECT DESCRIPTION
requirements:
- "- Think about the goal of the Fabric project, which is discussed below:\nFABRIC\
  \ PROJECT DESCRIPTION\nfabriclogo\n fabric\nStatic Badge\nGitHub top language GitHub\
  \ last commit License: MIT\nfabric is an open-source framework for augmenting humans\
  \ using AI.\nIntroduction Video • What and Why • Philosophy • Quickstart • Structure\
  \ • Examples • Custom Patterns • Helper Apps • Examples • Meta\nNavigation\nIntroduction\
  \ Videos\nWhat and Why\nPhilosophy\nBreaking problems into components\nToo many\
  \ prompts\nThe Fabric approach to prompting\nQuickstart\nSetting up the fabric commands\n\
  Using the fabric client\nJust use the Patterns\nCreate your own Fabric Mill\nStructure\n\
  Components\nCLI-native\nDirectly calling Patterns\nExamples\nCustom Patterns\nHelper\
  \ Apps\nMeta\nPrimary contributors\nNote\nWe are adding functionality to the project\
  \ so often that you should update often as well. That means: git pull; pipx install\
  \ . --force; fabric --update; source ~/.zshrc (or ~/.bashrc) in the main directory!\n\
  March 13, 2024 — We just added pipx install support, which makes it way easier to\
  \ install Fabric, support for Claude, local models via Ollama, and a number of new\
  \ Patterns. Be sure to update and check fabric -h for the latest!\nIntroduction\
  \ videos\nNote\nThese videos use the ./setup.sh install method, which is now replaced\
  \ with the easier pipx install . method. Other than that everything else is still\
  \ the same.\n fabric_intro_video\n Watch the video\nWhat and why\nSince the start\
  \ of 2023 and GenAI we've seen a massive number of AI applications for accomplishing\
  \ tasks. It's powerful, but it's not easy to integrate this functionality into our\
  \ lives.\nIn other words, AI doesn't have a capabilities problem—it has an integration\
  \ problem.\nFabric was created to address this by enabling everyone to granularly\
  \ apply AI to everyday challenges.\nPhilosophy\nAI isn't a thing; it's a magnifier\
  \ of a thing. And that thing is human creativity.\nWe believe the purpose of technology\
  \ is to help humans flourish, so when we talk about AI we start with the human problems\
  \ we want to solve.\nBreaking problems into components\nOur approach is to break\
  \ problems into individual pieces (see below) and then apply AI to them one at a\
  \ time. See below for some examples.\naugmented_challenges\nToo many prompts\nPrompts\
  \ are good for this, but the biggest challenge I faced in 2023——which still exists\
  \ today—is the sheer number of AI prompts out there. We all have prompts that are\
  \ useful, but it's hard to discover new ones, know if they are good or not, and\
  \ manage different versions of the ones we like.\nOne of fabric's primary features\
  \ is helping people collect and integrate prompts, which we call Patterns, into\
  \ various parts of their lives.\nFabric has Patterns for all sorts of life and work\
  \ activities, including:\nExtracting the most interesting parts of YouTube videos\
  \ and podcasts\nWriting an essay in your own voice with just an idea as an input\n\
  Summarizing opaque academic papers\nCreating perfectly matched AI art prompts for\
  \ a piece of writing\nRating the quality of content to see if you want to read/watch\
  \ the whole thing\nGetting summaries of long, boring content\nExplaining code to\
  \ you\nTurning bad documentation into usable documentation\nCreating social media\
  \ posts from any content input\nAnd a million more…\nOur approach to prompting\n\
  Fabric Patterns are different than most prompts you'll see.\nFirst, we use Markdown\
  \ to help ensure maximum readability and editability. This not only helps the creator\
  \ make a good one, but also anyone who wants to deeply understand what it does.\
  \ Importantly, this also includes the AI you're sending it to!\nHere's an example\
  \ of a Fabric Pattern.\nhttps://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md\n\
  pattern-example\nNext, we are extremely clear in our instructions, and we use the\
  \ Markdown structure to emphasize what we want the AI to do, and in what order.\n\
  And finally, we tend to use the System section of the prompt almost exclusively.\
  \ In over a year of being heads-down with this stuff, we've just seen more efficacy\
  \ from doing that. If that changes, or we're shown data that says otherwise, we\
  \ will adjust.\nQuickstart\nThe most feature-rich way to use Fabric is to use the\
  \ fabric client, which can be found under /client directory in this repository.\n\
  Setting up the fabric commands\nFollow these steps to get all fabric related apps\
  \ installed and configured.\nNavigate to where you want the Fabric project to live\
  \ on your system in a semi-permanent place on your computer.\n# Find a home for\
  \ Fabric\ncd /where/you/keep/code\nClone the project to your computer.\n# Clone\
  \ Fabric to your computer\ngit clone https://github.com/danielmiessler/fabric.git\n\
  Enter Fabric's main directory\n# Enter the project folder (where you cloned it)\n\
  cd fabric\nInstall pipx:\nmacOS:\nbrew install pipx\nLinux:\nsudo apt install pipx\n\
  Windows:\nUse WSL and follow the Linux instructions.\nInstall fabric\npipx install\
  \ .\nRun setup:\nfabric --setup\nRestart your shell to reload everything.\nNow you\
  \ are up and running! You can test by running the help.\n# Making sure the paths\
  \ are set up correctly\nfabric --help\nNote\nIf you're using the server functions,\
  \ fabric-api and fabric-webui need to be run in distinct terminal windows.\nUsing\
  \ the fabric client\nOnce you have it all set up, here's how to use it.\nCheck out\
  \ the options fabric -h\nus the results in\n                        realtime. NOTE:\
  \ You will not be able to pipe the\n                        output into another\
  \ command.\n  --list, -l            List available patterns\n  --clear         \
  \      Clears your persistent model choice so that you can\n                   \
  \     once again use the --model flag\n  --update, -u          Update patterns.\
  \ NOTE: This will revert the default\n                        model to gpt4-turbo.\
  \ please run --changeDefaultModel\n                        to once again set default\
  \ model\n  --pattern PATTERN, -p PATTERN\n                        The pattern (prompt)\
  \ to use\n  --setup               Set up your fabric instance\n  --changeDefaultModel\
  \ CHANGEDEFAULTMODEL\n                        Change the default model. For a list\
  \ of available\n                        models, use the --listmodels flag.\n  --model\
  \ MODEL, -m MODEL\n                        Select the model to use. NOTE: Will not\
  \ work if you\n                        have set a default model. please use --clear\
  \ to clear\n                        persistence before using this flag\n  --listmodels\
  \          List all available models\n  --remoteOllamaServer REMOTEOLLAMASERVER\n\
  \                        The URL of the remote ollamaserver to use. ONLY USE\n \
  \                       THIS if you are using a local ollama server in an non-\n\
  \                        default location or port\n  --context, -c         Use Context\
  \ file (context.md) to add context to your\n                        pattern\nage:\
  \ fabric [-h] [--text TEXT] [--copy] [--agents {trip_planner,ApiKeys}]\n       \
  \       [--output [OUTPUT]] [--stream] [--list] [--clear] [--update]\n         \
  \     [--pattern PATTERN] [--setup]\n              [--changeDefaultModel CHANGEDEFAULTMODEL]\
  \ [--model MODEL]\n              [--listmodels] [--remoteOllamaServer REMOTEOLLAMASERVER]\n\
  \              [--context]\nAn open source framework for augmenting humans using\
  \ AI.\noptions:\n  -h, --help            show this help message and exit\n  --text\
  \ TEXT, -t TEXT  Text to extract summary from\n  --copy, -C            Copy the\
  \ response to the clipboard\n  --agents {trip_planner,ApiKeys}, -a {trip_planner,ApiKeys}\n\
  \                        Use an AI agent to help you with a task. Acceptable\n \
  \                       values are 'trip_planner' or 'ApiKeys'. This option\n  \
  \                      cannot be used with any other flag.\n  --output [OUTPUT],\
  \ -o [OUTPUT]\n                        Save the response to a file\n  --stream,\
  \ -s          Use this option if you want to see\nExample commands\nThe client,\
  \ by default, runs Fabric patterns without needing a server (the Patterns were downloaded\
  \ during setup). This means the client connects directly to OpenAI using the input\
  \ given and the Fabric pattern used.\nRun the summarize Pattern based on input from\
  \ stdin. In this case, the body of an article.\npbpaste | fabric --pattern summarize\n\
  Run the analyze_claims Pattern with the --stream option to get immediate and streaming\
  \ results.\npbpaste | fabric --stream --pattern analyze_claims\nRun the extract_wisdom\
  \ Pattern with the --stream option to get immediate and streaming results from any\
  \ YouTube video (much like in the original introduction video).\nyt --transcript\
  \ https://youtube.com/watch?v=uXs-zPc63kM | fabric --stream --pattern extract_wisdom\n\
  new All of the patterns have been added as aliases to your bash (or zsh) config\
  \ file\npbpaste | analyze_claims --stream\nNote\nMore examples coming in the next\
  \ few days, including a demo video!\nJust use the Patterns\nfabric-patterns-screenshot\n\
  If you're not looking to do anything fancy, and you just want a lot of great prompts,\
  \ you can navigate to the /patterns directory and start exploring!\nWe hope that\
  \ if you used nothing else from Fabric, the Patterns by themselves will make the\
  \ project useful.\nYou can use any of the Patterns you see there in any AI application\
  \ that you have, whether that's ChatGPT or some other app or website. Our plan and\
  \ prediction is that people will soon be sharing many more than those we've published,\
  \ and they will be way better than ours.\nThe wisdom of crowds for the win.\nCreate\
  \ your own Fabric Mill\nfabric_mill_architecture\nBut we go beyond just providing\
  \ Patterns. We provide code for you to build your very own Fabric server and personal\
  \ AI infrastructure!\nStructure\nFabric is themed off of, well… fabric—as in…woven\
  \ materials. So, think blankets, quilts, patterns, etc. Here's the concept and structure:\n\
  Components\nThe Fabric ecosystem has three primary components, all named within\
  \ this textile theme.\nThe Mill is the (optional) server that makes Patterns available.\n\
  Patterns are the actual granular AI use cases (prompts).\nStitches are chained together\
  \ Patterns that create advanced functionality (see below).\nLooms are the client-side\
  \ apps that call a specific Pattern hosted by a Mill.\nCLI-native\nOne of the coolest\
  \ parts of the project is that it's command-line native!\nEach Pattern you see in\
  \ the /patterns directory can be used in any AI application you use, but you can\
  \ also set up your own server using the /server code and then call APIs directly!\n\
  Once you're set up, you can do things like:\n# Take any idea from `stdin` and send\
  \ it to the `/write_essay` API!\necho \"An idea that coding is like speaking with\
  \ rules.\" | write_essay\nDirectly calling Patterns\nOne key feature of fabric and\
  \ its Markdown-based format is the ability to _ directly reference_ (and edit) individual\
  \ patterns directly—on their own—without surrounding code.\nAs an example, here's\
  \ how to call the direct location of the extract_wisdom pattern.\nhttps://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md\n\
  This means you can cleanly, and directly reference any pattern for use in a web-based\
  \ AI app, your own code, or wherever!\nEven better, you can also have your Mill\
  \ functionality directly call system and user prompts from fabric, meaning you can\
  \ have your personal AI ecosystem automatically kept up to date with the latest\
  \ version of your favorite Patterns.\nHere's what that looks like in code:\nhttps://github.com/danielmiessler/fabric/blob/main/server/fabric_api_server.py\n\
  # /extwis\n@app.route(\"/extwis\", methods=[\"POST\"])\n@auth_required  # Require\
  \ authentication\ndef extwis():\n    data = request.get_json()\n    # Warn if there's\
  \ no input\n    if \"input\" not in data:\n        return jsonify({\"error\": \"\
  Missing input parameter\"}), 400\n    # Get data from client\n    input_data = data[\"\
  input\"]\n    # Set the system and user URLs\n    system_url = \"https://raw.githubusercontent.com/danielmiessler/fabric/main/patterns/extract_wisdom/system.md\"\
  \n    user_url = \"https://raw.githubusercontent.com/danielmiessler/fabric/main/patterns/extract_wisdom/user.md\"\
  \n    # Fetch the prompt content\n    system_content = fetch_content_from_url(system_url)\n\
  \    user_file_content = fetch_content_from_url(user_url)\n    # Build the API call\n\
  \    system_message = {\"role\": \"system\", \"content\": system_content}\n    user_message\
  \ = {\"role\": \"user\", \"content\": user_file_content + \"\\n\" + input_data}\n\
  \    messages = [system_message, user_message]\n    try:\n        response = openai.chat.completions.create(\n\
  \            model=\"gpt-4-1106-preview\",\n            messages=messages,\n   \
  \         temperature=0.0,\n            top_p=1,\n            frequency_penalty=0.1,\n\
  \            presence_penalty=0.1,\n        )\n        assistant_message = response.choices[0].message.content\n\
  \        return jsonify({\"response\": assistant_message})\n    except Exception\
  \ as e:\n        return jsonify({\"error\": str(e)}), 500\nExamples\nHere's an abridged\
  \ output example from the extract_wisdom pattern (limited to only 10 items per section).\n\
  # Paste in the transcript of a YouTube video of Riva Tez on David Perrel's podcast\n\
  pbpaste | extract_wisdom\n## SUMMARY:\nThe content features a conversation between\
  \ two individuals discussing various topics, including the decline of Western culture,\
  \ the importance of beauty and subtlety in life, the impact of technology and AI,\
  \ the resonance of Rilke's poetry, the value of deep reading and revisiting texts,\
  \ the captivating nature of Ayn Rand's writing, the role of philosophy in understanding\
  \ the world, and the influence of drugs on society. They also touch upon creativity,\
  \ attention spans, and the importance of introspection.\n## IDEAS:\n1. Western culture\
  \ is perceived to be declining due to a loss of values and an embrace of mediocrity.\n\
  2. Mass media and technology have contributed to shorter attention spans and a need\
  \ for constant stimulation.\n3. Rilke's poetry resonates due to its focus on beauty\
  \ and ecstasy in everyday objects.\n4. Subtlety is often overlooked in modern society\
  \ due to sensory overload.\n5. The role of technology in shaping music and performance\
  \ art is significant.\n6. Reading habits have shifted from deep, repetitive reading\
  \ to consuming large quantities of new material.\n7. Revisiting influential books\
  \ as one ages can lead to new insights based on accumulated wisdom and experiences.\n\
  8. Fiction can vividly illustrate philosophical concepts through characters and\
  \ narratives.\n9. Many influential thinkers have backgrounds in philosophy, highlighting\
  \ its importance in shaping reasoning skills.\n10. Philosophy is seen as a bridge\
  \ between theology and science, asking questions that both fields seek to answer.\n\
  ## QUOTES:\n1. \"You can't necessarily think yourself into the answers. You have\
  \ to create space for the answers to come to you.\"\n2. \"The West is dying and\
  \ we are killing her.\"\n3. \"The American Dream has been replaced by mass packaged\
  \ mediocrity porn, encouraging us to revel like happy pigs in our own meekness.\"\
  \n4. \"There's just not that many people who have the courage to reach beyond consensus\
  \ and go explore new ideas.\"\n5. \"I'll start watching Netflix when I've read the\
  \ whole of human history.\"\n6. \"Rilke saw beauty in everything... He sees it's\
  \ in one little thing, a representation of all things that are beautiful.\"\n7.\
  \ \"Vanilla is a very subtle flavor... it speaks to sort of the sensory overload\
  \ of the modern age.\"\n8. \"When you memorize chapters [of the Bible], it takes\
  \ a few months, but you really understand how things are structured.\"\n9. \"As\
  \ you get older, if there's books that moved you when you were younger, it's worth\
  \ going back and rereading them.\"\n10. \"She [Ayn Rand] took complicated philosophy\
  \ and embodied it in a way that anybody could resonate with.\"\n## HABITS:\n1. Avoiding\
  \ mainstream media consumption for deeper engagement with historical texts and personal\
  \ research.\n2. Regularly revisiting influential books from youth to gain new insights\
  \ with age.\n3. Engaging in deep reading practices rather than skimming or speed-reading\
  \ material.\n4. Memorizing entire chapters or passages from significant texts for\
  \ better understanding.\n5. Disengaging from social media and fast-paced news cycles\
  \ for more focused thought processes.\n6. Walking long distances as a form of meditation\
  \ and reflection.\n7. Creating space for thoughts to solidify through introspection\
  \ and stillness.\n8. Embracing emotions such as grief or anger fully rather than\
  \ suppressing them.\n9. Seeking out varied experiences across different careers\
  \ and lifestyles.\n10. Prioritizing curiosity-driven research without specific goals\
  \ or constraints.\n## FACTS:\n1. The West is perceived as declining due to cultural\
  \ shifts away from traditional values.\n2. Attention spans have shortened due to\
  \ technological advancements and media consumption habits.\n3. Rilke's poetry emphasizes\
  \ finding beauty in everyday objects through detailed observation.\n4. Modern society\
  \ often overlooks subtlety due to sensory overload from various stimuli.\n5. Reading\
  \ habits have evolved from deep engagement with texts to consuming large quantities\
  \ quickly.\n6. Revisiting influential books can lead to new insights based on accumulated\
  \ life experiences.\n7. Fiction can effectively illustrate philosophical concepts\
  \ through character development and narrative arcs.\n8. Philosophy plays a significant\
  \ role in shaping reasoning skills and understanding complex ideas.\n9. Creativity\
  \ may be stifled by cultural nihilism and protectionist attitudes within society.\n\
  10. Short-term thinking undermines efforts to create lasting works of beauty or\
  \ significance.\n## REFERENCES:\n1. Rainer Maria Rilke's poetry\n2. Netflix\n3.\
  \ Underworld concert\n4. Katy Perry's theatrical performances\n5. Taylor Swift's\
  \ performances\n6. Bible study\n7. Atlas Shrugged by Ayn Rand\n8. Robert Pirsig's\
  \ writings\n9. Bertrand Russell's definition of philosophy\n10. Nietzsche's walks\n\
  Custom Patterns\nYou can also use Custom Patterns with Fabric, meaning Patterns\
  \ you keep locally and don't upload to Fabric.\nOne possible place to store them\
  \ is ~/.config/custom-fabric-patterns.\nThen when you want to use them, simply copy\
  \ them into ~/.config/fabric/patterns.\ncp -a ~/.config/custom-fabric-patterns/*\
  \ ~/.config/fabric/patterns/`\nNow you can run them with:\npbpaste | fabric -p your_custom_pattern\n\
  Helper Apps\nThese are helper tools to work with Fabric. Examples include things\
  \ like getting transcripts from media files, getting metadata about media, etc.\n\
  yt (YouTube)\nyt is a command that uses the YouTube API to pull transcripts, pull\
  \ user comments, get video duration, and other functions. It's primary function\
  \ is to get a transcript from a video that can then be stitched (piped) into other\
  \ Fabric Patterns.\nusage: yt [-h] [--duration] [--transcript] [url]\nvm (video\
  \ meta) extracts metadata about a video, such as the transcript and the video's\
  \ duration. By Daniel Miessler.\npositional arguments:\n  url           YouTube\
  \ video URL\noptions:\n  -h, --help    Show this help message and exit\n  --duration\
  \    Output only the duration\n  --transcript  Output only the transcript\n  --comments\
  \    Output only the user comments \nts (Audio transcriptions)\n'ts' is a command\
  \ that uses the OpenApi Whisper API to transcribe audio files. Due to the context\
  \ window, this tool uses pydub to split the files into 10 minute segments. for more\
  \ information on pydub, please refer https://github.com/jiaaro/pydub\nInstallation\n\
  mac:\nbrew install ffmpeg\nlinux:\napt install ffmpeg\nwindows:\ndownload instructions\
  \ https://www.ffmpeg.org/download.html\nts -h\nusage: ts [-h] audio_file\nTranscribe\
  \ an audio file.\npositional arguments:\n  audio_file  The path to the audio file\
  \ to be transcribed.\noptions:\n  -h, --help  show this help message and exit\n\
  Save\nsave is a \"tee-like\" utility to pipeline saving of content, while keeping\
  \ the output stream intact. Can optionally generate \"frontmatter\" for PKM utilities\
  \ like Obsidian via the \"FABRIC_FRONTMATTER\" environment variable\nIf you'd like\
  \ to default variables, set them in ~/.config/fabric/.env. FABRIC_OUTPUT_PATH needs\
  \ to be set so save where to write. FABRIC_FRONTMATTER_TAGS is optional, but useful\
  \ for tracking how tags have entered your PKM, if that's important to you.\nusage\n\
  usage: save [-h] [-t, TAG] [-n] [-s] [stub]\nsave: a \"tee-like\" utility to pipeline\
  \ saving of content, while keeping the output stream intact. Can optionally generate\
  \ \"frontmatter\" for PKM utilities like Obsidian via the\n\"FABRIC_FRONTMATTER\"\
  \ environment variable\npositional arguments:\n  stub                stub to describe\
  \ your content. Use quotes if you have spaces. Resulting format is YYYY-MM-DD-stub.md\
  \ by default\noptions:\n  -h, --help          show this help message and exit\n\
  \  -t, TAG, --tag TAG  add an additional frontmatter tag. Use this argument multiple\
  \ timesfor multiple tags\n  -n, --nofabric      don't use the fabric tags, only\
  \ use tags from --tag\n  -s, --silent        don't use STDOUT for output, only save\
  \ to the file\nExample\necho test | save --tag extra-tag stub-for-name\ntest\n$\
  \ cat ~/obsidian/Fabric/2024-03-02-stub-for-name.md\n---\ngeneration_date: 2024-03-02\
  \ 10:43\ntags: fabric-extraction stub-for-name extra-tag\n---\ntest\nEND FABRIC\
  \ PROJECT DESCRIPTION\n- Take the Fabric patterns given to you as input and think\
  \ about how to create a Markmap visualization of everything you can do with Fabric.\n\
  Examples: Analyzing videos, summarizing articles, writing essays, etc.\n- The visual\
  \ should be broken down by the type of actions that can be taken, such as summarization,\
  \ analysis, etc., and the actual patterns should branch from there."
placeholders: []
output_format: Plain text
